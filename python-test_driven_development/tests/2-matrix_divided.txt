>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided([[2, 4], [6, 8]], 2)
[[1.0, 2.0], [3.0, 4.0]]

>>> matrix_divided([[1, 2], [3, 4]], "3")
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided([[3, 9], [12, 15]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided([["2", 4], ["6", 8]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2, 3],[4, 5, 6]]

>>> matrix_divided(matrix, "value")
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, None)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, (1, "value"))
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided(matrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix_divided(matrix, (1, "value"))
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix = [[1, 2],[3, 4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix = [[1, 2],[4, [1, 2]]]
>>> matrix_divided(matrix, 4)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [["arg", 2],[4, 5]]
>>> matrix_divided(matrix, 4)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats